What happens when you initialize a repository? Why do you need to do it?

It adds a git folder, and it's required to utilize git functions to maintain version control.

How is the staging area different from the working directory and the repository?
What value do you think it offers? Ok... how about now?

Staging area only includes files you'd like to keep track of in a commit.
Working directory simply the directory of all files present in the same folder.

How can you use the staging area to make sure you have one commit per logical
change?

I can add files to the staging area every time I make a logical change.
Then I can simply make a commit to ensure consistency.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

If I want to try different implementations of the same functions varying in speed or architecture.

How do the diagrams help you visualize the branch structure?

It allows me to see the path towards certain commits I might want to bring up.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches combines the changes made from each respective branch.
The diagram allows us to keep track of the changes made to each different branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

Pro is it accomplishes tasks which would seem fairly tedious for simple blocks of code.
It also identifies conflicts between two sets of code and informs the user with the original source,
and the code for the two respective merging elements in the working directory source code.
Con is it might not work if the two commits are in different states.
It also becomes a difficult issue if several people are working on the document
and commits aren't recognized because they're not introduced to the repo in a timely manner.